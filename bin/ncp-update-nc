#!/usr/bin/env bash

# Upgrade to a different Nextcloud version
#
# Copyleft 2017 by Ignacio Nunez Hernanz <nacho _a_t_ ownyourbits _d_o_t_ com>
# GPL licensed (see end of file) * Use at your own risk!
#
# Usage:
#       ncp-update-nc <version>
#
# More at https://ownyourbits.com
#

# test cases
####################
# - with and without moving datadir
# - failure at each test point
# -> must pass basic NC in tests.py ( meaning it's not in a broken state )

# print_lines a line using printf instead of using echo, for compatibility and reducing unwanted behaviour
function print_line {
    printf '%s\n' "$@"
}

# A log that uses log levels for logging different outputs
# Log levels  | Colour
# -2: Debug   | CYAN='\e[1;36m'
# -1: Info    | BLUE='\e[1;34m'
#  0: Success | GREEN='\e[1;32m'
#  1: Warning | YELLOW='\e[1;33m'
#  2: Error   | RED='\e[1;31m'
function log {
    if [[ "$#" -gt 0 ]]
    then if [[ "$1" =~ [(-2)-2] ]]
         then case "$1" in
                  -2) printf '\e[1;36mDEBUG\e[0m %s\n'   "${*:2}" >&2 ;;
                  -1) printf '\e[1;34mINFO\e[0m %s\n'    "${*:2}"     ;;
                   0) printf '\e[1;32mSUCCESS\e[0m %s\n' "${*:2}"     ;;
                   1) printf '\e[1;33mWARNING\e[0m %s\n' "${*:2}"     ;;
                   2) printf '\e[1;31mERROR\e[0m %s\n'   "${*:2}" >&2 ;;
              esac
         else log 2 "Invalid log level: [Debug: -2|Info: -1|Success: 0|Warning: 1|Error: 2]"
         fi
  fi
}

VER="$1"
BIN="${0##*/}"

# shellcheck disable=SC1091
if [[ -f '/usr/local/etc/library.sh' ]]
then source '/usr/local/etc/library.sh' 
elif [[ -f 'etc/library.sh' ]]
then source 'etc/library.sh'
fi

# pre-checks
####################
if [[ -z "$VER" ]]
then log 2 "Usage: $BIN <version>"
     exit 1
fi

if [[ -f '/.docker-image' ]]
then BASEDIR='/data'
else BASEDIR='/var/www'
fi

log -2 "BASEDIR: $BASEDIR"

if ! cd "$BASEDIR"
then log 2 "Failed to change directory to: $BASEDIR"
     exit 1
fi

DATADIR="$(get_nc_config_value datadirectory)"

if ! ncc status &>/dev/null && [[ "$DBG" == "x" ]]
then ncc status
     log 2 "Nextcloud is currently down"
     exit 1
fi

if [[ -d '/var/www/nextcloud-old' ]]
then log 2 "Nextcloud backup directory found. Interrupted or already running installation?"
     exit 1
fi

if [[ ! -d '/var/www/nextcloud' ]]
then log 2 "Directory not found: /var/www/nextcloud"
     exit 1
fi

if [[ ! -d "$DATADIR" ]]
then log 2 "Directory not found: $DATADIR"
     exit 1
fi

# check version
####################

if [[ "$EUID" -eq 0 ]]
then SUDO=(sudo -u www-data)
fi

CURRENT="$("${SUDO[@]}" php /var/www/nextcloud/occ status | grep "version:" | awk '{ print $3 }')"
MAJOR_CUR="$( cut -d. -f1 <<<"$CURRENT" )"
MAJOR_NEW="$( cut -d. -f1 <<<"$VER" )"

if [[ "$((MAJOR_NEW - MAJOR_CUR))" -gt 1 ]]
then log 2 "Upgrade cannot skip major versions. Please upgrade one major version at a time" >&2; exit 1
fi

if [[ "$MAJOR_NEW" -ge 24 ]] && [[ "$(lsb_release -r)" =~ .*10 ]]
then log 2 "NCP doesn't support Nextcloud versions greater than 23 with Debian 10 (Buster). Please run ncp-dist-upgrade."; exit 1
fi

if ! grep -qP "\d+\.\d+\.\d+" <<<"$CURRENT"
then print_line "Invalid version: $CURRENT"; exit 1
fi

if ! grep -qP "\d+\.\d+\.\d+" <<<"$VER"
then print_line "Invalid version: $VER"; exit 1
fi

log -1 "Current Nextcloud version: $CURRENT"
log -1 "Available Nextcloud version: $VER"

if ! is_more_recent_than "$VER" "$CURRENT" 
then log -1 "Nothing to update"; exit 1 # we want `exit 1` so the autoupdate doesn't notify success in this case
fi


if ! is_more_recent_than '25.0.0' "$VER" \
  && is_more_recent_than "8.1.0" "${PHPVER}.0" \
  && is_docker
then log 2 "You need to upgrade to a later docker image in order to upgrade to Nextcloud 25+"; exit 1
fi

# make sure that cron.php is not running and there are no pending jobs
# https://github.com/nextcloud/server/issues/10949
pgrep -cf cron.php &>/dev/null && { pkill -f cron.php; sleep 3; }
pgrep -cf cron.php &>/dev/null && { print_line "cron.php running. Abort"; exit 1; }
mysql nextcloud <<<"UPDATE oc_jobs SET reserved_at=0;"

# cleanup
####################
function cleanup {
    local RET="$?"
    set +eE
    print_line "Cleanup"
    if ! rm --recursive --force "$BASEDIR"/nextcloud.tar.bz2 "$BASEDIR"/nextcloud-old
    then log 2 "Failed to remove: $BASEDIR/nextcloud.tar.bz2 & $BASEDIR/nextcloud-old"
    fi
    trap - EXIT SIGHUP SIGILL SIGABRT SIGINT
    exit "$RET"
}

trap 'cleanup' EXIT SIGHUP SIGILL SIGABRT SIGINT

# get new code
####################
URL="https://download.nextcloud.com/server/releases/nextcloud-$VER.tar.bz2"
log -1 "Downloading Nextcloud: $VER"
if ! wget -q "$URL" -O 'nextcloud.tar.bz2'
then log 2 "Failed to download: Nextcloud $VER"
     exit 1
fi

# backup
####################
BKPDIR="$BASEDIR"
WITH_DATA='no'
COMPRESSED='yes'
LIMIT=0

print_line "Creating backup"
set +eE
ncp-backup "$BKPDIR" "$WITH_DATA" "$COMPRESSED" "$LIMIT" # && false # test point
RET="$?"
sync
set -eE

# TODO Change this to use find instead of ls
# shellcheck disable=SC2012
BKP_="$( ls -1t "$BKPDIR"/nextcloud-bkp_*.tar.gz 2>/dev/null | head -1 )"

if [[ ! -f "$BKP_"  ]]
then set +eE
     log 2 "Error backing up"
     false || cleanup
fi

if [[ "$RET" -ne 0  ]]
then rm --force "$BKP_"
     set +eE
     log 2 "Error backing up"
     false || cleanup
fi

BKP="$(dirname "$BKP_" )/$( basename "$BKP_" .tar.gz )-${CURRENT}.tar.gz"
print_line "Storing backup at: $BKP"
mv "$BKP_" "$BKP"

# simple restore if anything fails from here
####################
function rollback_simple () {
    set +eE
    trap "" INT TERM HUP ERR
    print_line "Abort" "Simple rollback"
    if ! rm --recursive --force "$BASEDIR"/nextcloud
    then log 2 "Failed to remove: $BASEDIR/nextcloud"
    fi
    if ! mv "$BASEDIR"/nextcloud-old "$BASEDIR"/nextcloud
    then log 2 "Failed to move $BASEDIR/nextcloud-old to $BASEDIR/nextcloud"
    fi
    false || cleanup # so cleanup exits with 1
}

trap 'rollback_simple' INT TERM HUP ERR

# replace code
####################
print_line "Installing Nextcloud: $VER"
mv -T                  'nextcloud nextcloud-old'
tar -xf                'nextcloud.tar.bz2'     # && false # test point
rm --recursive --force '/var/www/nextcloud.tar.bz2'

# copy old config
####################
cp 'nextcloud-old/config/config.php' 'nextcloud/config/'

# copy old themes
####################
cp -raT 'nextcloud-old/themes/' 'nextcloud/themes/'

# copy old NCP apps
####################
for APP in nextcloudpi previewgenerator
do if [[ -d nextcloud-old/apps/"$APP" ]]
   then cp -r -L nextcloud-old/apps/"$APP" '/var/www/nextcloud/apps/'
   fi
done

#false # test point

# copy data if it was at the default location
####################
if [[ "$DATADIR" == "/var/www/nextcloud/data" ]] || [[ "$DATADIR" == "/data/nextcloud/data" ]]
then print_line "Restoring data"
     if ! mv -T 'nextcloud-old/data' 'nextcloud/data'
     then log 2 "Failed to move nextcloud-old/data to nextcloud/data"
          exit 1
     fi
fi

# nc-restore if anything fails from here
####################
function rollback () {
    set +eE
    trap "" INT TERM HUP ERR EXIT
    print_line "Abort" "Doing cleanup"
    
    if ! rm --recursive --force '/var/www/nextcloud.tar.bz2' "$BASEDIR"/nextcloud-old
    then log 2 "Failed to remove: /var/www/nextcloud.tar.bz2 & $BASEDIR/nextcloud-old"
         exit 1
    fi

    local TMPDATA
    log -1 "Rollback to backup: $BKP"
    mkdir --parents "${BASEDIR}/recovery/"
    
    if ! TMPDATA="$(mktemp -d "$BASEDIR/recovery/ncp-data.XXXXXX")"
    then log 2 "Failed to create temp dir" >&2
         exit 1
    fi
    
    if [[ "$DATADIR" == "$BASEDIR/nextcloud/data" ]]
    then mv -T "$DATADIR" "$TMPDATA"
    fi
    
    if ! ncp-restore "$BKP"
    then log 2 "Rollback failed! Data left at: $TMPDATA"
         exit 1
    fi
    
    if [[ "$DATADIR" == "$BASEDIR/nextcloud/data" ]]
    then if ! rm --recursive --force "$DATADIR"
         then log 2 "Failed to remove: $DATADIR"
              exit 1
         fi
         if ! mv -T "$TMPDATA" "$DATADIR"
         then log 2 "Failed to move $TMPDATA to $DATADIR"
              exit 1
         fi
    fi
    
    if ! rm "$BKP"
    then log 2 "Failed to remove: $BKP"
         exit 1
    fi
    log 0 "Rollback successful. Nothing was updated"; exit 1
}
trap 'rollback' INT TERM HUP ERR

# fix permissions
####################
log -1 "Fix permissions"
chown -R 'www-data':'www-data' nextcloud
find nextcloud/ -type d -exec chmod 750 {} \;
find nextcloud/ -type f -exec chmod 640 {} \;

# upgrade
####################
log -1 "Upgrade"
ncc=(sudo -u www-data php nextcloud/occ)
"${ncc[@]}" upgrade      # && false # test point
"${ncc[@]}" | grep -q db:add-missing-indices      && "${ncc[@]}" db:add-missing-indices -n
"${ncc[@]}" | grep -q db:add-missing-columns      && "${ncc[@]}" db:add-missing-columns -n
"${ncc[@]}" | grep -q db:add-missing-primary-keys && "${ncc[@]}" db:add-missing-primary-keys -n
"${ncc[@]}" | grep -q db:convert-filecache-bigint && "${ncc[@]}" db:convert-filecache-bigint -n

# use the correct version for custom apps
NCVER="$(ncc status | grep "version:" | awk '{ print $3 }')"
if is_more_recent_than '21.0.0' "$NCVER"
then NCPREV='/var/www/ncp-previewgenerator/ncp-previewgenerator-nc20'
else
     if ! is_app_enabled notify_push # Install notify_push if not installed
     then "${ncc[@]}" app:install notify_push
          "${ncc[@]}" app:enable  notify_push
          install_template 'nextcloud.conf.sh' '/etc/apache2/sites-available/nextcloud.conf'

          a2enmod proxy \
                  proxy_http \
                  proxy_wstunnel
          apachectl -k graceful
          
          ## make sure the notify_push daemon is runnnig
          install_template 'systemd/notify_push.service.sh' '/etc/systemd/system/notify_push.service'
          start_notify_push

          NC_DOMAIN="$(ncc config:system:get overwrite.cli.url)"
          if ! set_nc_domain "$NC_DOMAIN"
          then log 2 "notify_push setup failed. Are you behind a proxy?"
               log -1 "Run: 'ncc config:system:set trusted_proxies 15 --value=<proxy_IP>' and then 'ncc notify_push:setup https://<domain>/push to enable"
               log -1 "Check https://help.nextcloud.com/tags/ncp for support"
          fi
     fi
     NCPREV='/var/www/ncp-previewgenerator/ncp-previewgenerator-nc21'
fi

if ! rm --recursive --force  '/var/www/nextcloud/apps/previewgenerator'
then log 2 "Failed to remove: /var/www/nextcloud/apps/previewgenerator"
     exit 1
fi

ln -snf "$NCPREV"            '/var/www/nextcloud/apps/previewgenerator'

if ! is_docker \
&& ! is_more_recent_than "24.0.0" "$NCVER" \
&& is_more_recent_than "8.1.0" "${PHPVER}.0"
then (
        log -1 "Upgrading PHP"
        export DEBIAN_FRONTEND=noninteractive
        PHPVER_OLD="$PHPVER"
        PHPVER_NEW="8.1"
        PHP_PACKAGES_OLD=(php-{common,igbinary,redis,json} "php${PHPVER_OLD}" \
        "php${PHPVER_OLD}"-{curl,gd,fpm,cli,opcache,mbstring,xml,zip,fileinfo,ldap,intl,bz2,json,common,readline,mysql,bcmath,gmp})
        PHP_PACKAGES_NEW=(php"$PHPVER_NEW" php"$PHPVER_NEW"-{curl,gd,fpm,cli,opcache,mbstring,xml,zip,fileinfo,ldap,intl,bz2,mysql,bcmath,gmp,redis,common})
        function php_restore {
            trap "" INT TERM HUP ERR
            log 2 "Something went wrong while upgrading PHP. Rollback PHP to: $PHPVER_OLD"
            set +e
            service "php${PHPVER_NEW}-fpm" stop
            a2disconf php"$PHPVER_NEW"-fpm
            rm '/etc/apt/sources.list.d/php.list'

            apt-get update  --assume-yes
            apt-get remove  --assume-yes --purge "${PHP_PACKAGES_NEW[@]}"
            apt-get install --assume-yes --no-install-recommends -t "$RELEASE" "${PHP_PACKAGES_OLD[@]}"

            set_ncpcfg 'php_version' "$PHPVER_OLD"
            install_template 'php/opcache.ini.sh' "/etc/php/${PHPVER_NEW}/mods-available/opcache.ini"
            run_app 'nc-limits'
            a2enconf php"$PHPVER_OLD"-fpm
            service php"$PHPVER_OLD"-fpm start
            service apache2 restart
            log 0 "PHP upgrade has successfully been reverted"
            set -e
        }

        trap 'php_restore' INT TERM HUP ERR

        # Setup apt repository for php 8
        wget -O '/etc/apt/trusted.gpg.d/php.gpg' 'https://packages.sury.org/php/apt.gpg'
        print_line "deb https://packages.sury.org/php/ ${RELEASE%-security} main" > '/etc/apt/sources.list.d/php.list'
        apt-get update --assume-yes
        clear_opcache

        log -1 "Stopping apache and php-fpm..."
        service php"$PHPVER_OLD"-fpm stop
        service apache2 stop

        log -1 "Remove old PHP ($PHPVER_OLD)..."
        a2disconf php"$PHPVER_OLD"-fpm
        apt-get remove --purge --assume-yes "${PHP_PACKAGES_OLD[@]}"

        log -1 "Installing PHP: $PHPVER_NEW"
        install_with_shadow_workaround --no-install-recommends systemd
        apt-get install --assume-yes --no-install-recommends -t "$RELEASE" "${PHP_PACKAGES_NEW[@]}"

        set_ncpcfg 'php_version' "$PHPVER_NEW"

        install_template 'php/opcache.ini.sh' "/etc/php/${PHPVER_NEW}/mods-available/opcache.ini"

        (
            set -e
            export PHPVER="$PHPVER_NEW"
            run_app 'nc-limits'
        )

        a2enconf php"$PHPVER_NEW"-fpm
        
        print_line "Starting apache and php-fpm"
        service php"$PHPVER_NEW"-fpm start
        service apache2 start
        "${ncc[@]}" status
     )
     # Reload library.sh to reset PHPVER
     # shellcheck disable=SC1091
     source '/usr/local/etc/library.sh'
fi

# refresh completions
ncc _completion -g --shell-type bash -p ncc | sed 's|/var/www/nextcloud/occ|ncc|g' > '/usr/share/bash-completion/completions/ncp'

log 0 "Update complete"

####################
mkdir --parents                "$DATADIR"/ncp-update-backups
mv                      "$BKP" "$DATADIR"/ncp-update-backups
chown -R 'www-data':'www-data' "$DATADIR"/ncp-update-backups
BKP="${DATADIR}/ncp-update-backups/$(basename "$BKP")"
log -1 "Backup stored at: $BKP"

bash -c "sleep 5; source /usr/local/etc/library.sh; clear_opcache;" &>/dev/null &
