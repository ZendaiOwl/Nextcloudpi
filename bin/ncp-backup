#!/usr/bin/env bash
set -eE
source '/usr/local/etc/library.sh'

if [[ "$1" = "--help" ]]
then echo "$0 <destdir> <includedata> <compress> <backuplimit>"
     echo " <includedata> and <compress> are 'yes' or 'no'"
     echo " <backuplimit> integer >= 1 or 0 for no limit"
     exit 0
fi

destdir="${1:-/media/USBdrive/ncp-backups}"
includedata="${2:-no}"
compress="${3:-no}"
backuplimit="${4:-0}"

destfile="$destdir"/nextcloud-bkp_"$( date +"%Y%m%d_%s" )".tar
dbbackup=nextcloud-sqlbkp_"$( date +"%Y%m%d" )".bak

if [[ -f '/.docker-image' ]]
then basedir='/data'
else basedir='/var/www'
fi

if [[ "$compress" == "yes" ]]
then destfile="$destfile".gz
fi

if ! datadir="$( get_nc_config_value datadirectory )"
then echo "Error reading data directory. Is Nextcloud running and configured?"
     exit 1
fi

function cleanup () {
    local ret="$?"
    rm --force "${dbbackup}"
    restore_maintenance_mode
    exit "$ret"
}
function fail () {
    local ret="$?"
    echo "Abort"
    rm --force "${dbbackup}" "${destfile}"
    restore_maintenance_mode
    exit "$ret"
}

trap 'cleanup' EXIT
trap 'fail' INT TERM HUP ERR

echo "Checking free space" # allow at least ~500 extra MiB
mkdir --parents "$destdir"

nsize="$(du -sb "$basedir/nextcloud" | awk '{ print $1 }')"

if [[ -d "$basedir/nextcloud"/data ]]
then dsize="$(du -sb "$basedir/nextcloud"/data | awk '{ print $1 }')"
fi

margin="$((500*1024*1024))" # safety margin for database and some extra

if [[ "$includedata" == "yes" ]]
then datasize="$(du -sb "$datadir" | awk '{ print $1 }')"
     size="$((nsize - dsize + margin + datasize))"
else size="$((nsize - dsize + margin))"
fi

free="$( df -B1 "$destdir" | tail -1 | awk '{ print $4 }' )"

if [[ "$size" -ge "$free" ]]
then echo "Not enough free space, need: $size Bytes"
     exit 1
fi

# delete older backups
if [[ "$backuplimit" != 0 ]]
then
    numbkps="$( ls "$destdir"/nextcloud-bkp_* 2>/dev/null | wc -l )"
    [[ "$numbkps" -ge "$backuplimit" ]] && \
    ls -t "$destdir"/nextcloud-bkp_* \
    | tail -"$(("$numbkps" - "$backuplimit" + 1))" \
    | while read -r f
    do echo "Cleaning up old backup: $f"
       rm "$f"
    done
fi

# database
save_maintenance_mode

cd "$basedir" || exit 1

echo "backup database..."
mysqldump -u root --single-transaction nextcloud > "$dbbackup"

# files
echo "Backing up files"

if [[ "$includedata" == "yes" ]]
then data="$(basename "$datadir")"
fi
if [[ "$compress" == "yes" ]]
then compress_arg=(-I pigz)
fi

mkdir --parents "$destdir"

tar "${compress_arg[@]}" -cf "$destfile" \
\
    "$dbbackup" \
\
    --exclude "$data/.opcache" \
    --exclude "$data/{access,error,nextcloud}.log" \
    --exclude "$data/access.log" \
    --exclude "$data/ncp-update-backups" \
    -C "$(dirname "$datadir"/)" "$data" \
\
    --exclude "nextcloud/data/*/files/*" \
    --exclude "nextcloud/data/.opcache" \
    --exclude "nextcloud/data/{access,error,nextcloud}.log" \
    --exclude "nextcloud/data/access.log" \
    --exclude "nextcloud/data/appdata_*/preview/*" \
    --exclude "nextcloud/data/*/uploads/*" \
    --exclude "nextcloud/data/*/cache/*" \
    --exclude "nextcloud/data/*/files_trashbin/*" \
    --exclude "nextcloud/data/*/files_versions/*" \
    --exclude "nextcloud/data/ncp-update-backups" \
    --exclude "nextcloud/data/__groupfolders" \
    --exclude "nextcloud/.data_*" \
    -C "$basedir" 'nextcloud/' \
  || {
        echo "error generating backup"
        exit 1
      }
rm "$dbbackup"
chmod 640 "$destfile"
chown :'www-data' "$destfile"

echo "Backup generated: $destfile"
