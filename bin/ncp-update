#!/usr/bin/env bash

# Update to the latest NextcloudPi code from GitHub

# prtlns a line using printf instead of using echo, for compatibility and reducing unwanted behaviour
function prtln {
    printf '%s\n' "$@"
}

# A log that uses log levels for logging different outputs
# Log levels  | Colour
# -2: Debug   | CYAN='\e[1;36m'
# -1: Info    | BLUE='\e[1;34m'
#  0: Success | GREEN='\e[1;32m'
#  1: Warning | YELLOW='\e[1;33m'
#  2: Error   | RED='\e[1;31m'
function log {
    if [[ "$#" -gt 0 ]]
    then if [[ "$1" =~ [(-2)-2] ]]
         then case "$1" in
                  -2) printf '\e[1;36mDEBUG\e[0m %s\n'   "${*:2}" >&2 ;;
                  -1) printf '\e[1;34mINFO\e[0m %s\n'    "${*:2}"     ;;
                   0) printf '\e[1;32mSUCCESS\e[0m %s\n' "${*:2}"     ;;
                   1) printf '\e[1;33mWARNING\e[0m %s\n' "${*:2}"     ;;
                   2) printf '\e[1;31mERROR\e[0m %s\n'   "${*:2}" >&2 ;;
              esac
         else log 2 "Invalid log level: [Debug: -2|Info: -1|Success: 0|Warning: 1|Error: 2]"
         fi
  fi
}

function remove_tmp_directory {
  if ! rm --recursive --force "$TMPDIR"
  then log 2 "Failed to remove directory: $TMPDIR"; return 1
  else log 0 "Removed tmp directory: $TMPDIR"; return 0
  fi
}

function clean_ncp_update {
    if ! cd /
    then log 2 "Failed to change directory to: /"
         log -1 "Attempting to remove tmp directory nonetheless"
         if ! remove_tmp_directory
         then exit 1
         fi
    else
         if ! remove_tmp_directory
         then exit 1
         fi
    fi
}

if [[ -n "$DBG" ]]
then set -"$DBG"
fi

if [[ -f '/.dockerenv' ]] \
|| [[ -f '/.docker-image' ]] \
|| [[ "$DOCKERBUILD" == 1 ]]
then log 1 "Docker images should be updated by replacing the container from the latest docker image.
Refer to the documentation for instructions: https://docs.nextcloudpi.com
If you are sure that you know what you are doing, you can still execute the update script by running it like this:
ALLOW_UPDATE_SCRIPT=1 ncp-update"
     if [[ "$ALLOW_UPDATE_SCRIPT" != "1" ]]
     then exit 1
     fi
fi

{
    if [[ "$EUID" -ne 0 ]]
    then log 2 "Must be run as root or with sudo, try: sudo ${BASH_SOURCE[0]}"; exit 1
    fi
    
    #OWNER="${OWNER:-nextcloud}"
    OWNER="${OWNER:-ZendaiOwl}"
    REPO="${REPO:-nextcloudpi}"
    BRANCH="${1:-master}"
    
    if [[ "$BRANCH" != "master" ]]
    then log -1 "Updating to development branch: $BRANCH"
    fi
    
    TMPDIR="$(mktemp -d /tmp/ncp-update.XXXXXX || {( log 2 "Failed to create temp dir. Exiting"; exit 1; )})"
    trap 'clean_ncp_update' EXIT SIGHUP SIGILL SIGABRT SIGINT
    
    log -1 "Downloading updates"
    if ! git clone --depth 20 -b "$BRANCH" -q https://github.com/"$OWNER"/"$REPO".git "$TMPDIR"
    then log 2 "Failed to download updates from repository"; exit 1
    fi
    
    # shellcheck disable=SC2164
    if [[ ! -f '/.ncp-image' ]]
    then # Update locally during build
         if ! cd "$TMPDIR"
         then log 2 "Failed to change directory to: $TMPDIR"; exit 1
         fi
         if [[ -n "$2" ]]
         then if ! git fetch origin "$2"
              then log 2 "Could not fetch: $2"; exit 1
              fi
              if ! git checkout FETCH_HEAD
              then log 2 "Failed to git checkout: FETCH_HEAD"; exit 1
              fi
        fi
    fi
    
    log -1 "Performing updates"
    if ! ./update.sh
    then log 2 "Update failed"; exit "$?"
    fi
    
    if ! cd "$TMPDIR"
    then log 2 "Failed to change directory to: $TMPDIR"; exit 1
    fi
    git describe --always --tags --abbrev=0 2>/dev/null | grep -qoP "v\d+\.\d+\.\d+" || git fetch --unshallow --tags -q
    VER="$(git describe --always --tags --abbrev=0 | grep -oP "v\d+\.\d+\.\d+")"
    
    # check format
    grep -qP "v\d+\.\d+\.\d+" <<< "$VER" || {
        if ! git clone --bare https://github.com/nextcloud/"$REPO".git "$TMPDIR"/temporary
        then log 2 "Failed to clone repository to: $TMPDIR/temporary"; exit 1
        fi
        
        if ! cd "$TMPDIR"/temporary
        then log 2 "Failed to change directory to: $TMPDIR/temporary"; exit 1
        fi
        
        VER="$(git describe --tags "$(git rev-list --tags --max-count=1)" | grep -oP "v\d+\.\d+\.\d+" || { log 2 "Missing version"; exit 1; } )"
        prtln "$VER" > "$TMPDIR"/version

        if ! cd "$TMPDIR"
        then log 2 "FAiled to change directory to: $TMPDIR"; exit 1
        fi
        
        if ! rm --recursive --force "$TMPDIR"/temporary
        then log 2 "Failed to remove directory: $TMPDIR/temporary"; exit 1
        fi
    }
    
    cat "$TMPDIR"/version > '/usr/local/etc/ncp-version'
    cat "$TMPDIR"/version > '/var/run/.ncp-latest-version'
    rm "$TMPDIR"/version
    
    VER="$(cat /usr/local/etc/ncp-version)"
    
    # write changelog
    git log --graph --oneline --decorate \
            --pretty=format:"[%D] %s" --date=short | \
            grep 'tag: v' | \
            sed '/HEAD ->\|origin/s|\[.*\(tag: v[0-9]\+\.[0-9]\+\.[0-9]\+\).*\]|[\1]|' | \
            sed 's|* \[tag: |[|' > '/usr/local/etc/ncp-changelog'
    
    log 0 "NextcloudPi updated to: $VER"; exit 0

} # force to read the whole thing into memory, as its contents might change in update.sh
